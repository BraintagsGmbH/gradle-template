apply plugin: 'eclipse'

project.ext {
  isIncludedBuild = gradle.parent != null
  isEclipse = System.getProperty("eclipse.launcher") != null || gradle.startParameter.taskNames.contains('eclipse') || gradle.startParameter.taskNames.contains('cleanEclipse')
}

apply from: rootDir.path + '/gradle/javaProject.gradle'

def vertxVersion      = rootProject.hasProperty('vertxVersion')?rootProject.vertxVersion:''
def btVertxVersion    = rootProject.hasProperty('btVertxVersion')?rootProject.btVertxVersion:''
def multiProject      = rootProject.hasProperty('multiProject')?rootProject.multiProject:false

configurations {
    provided
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'io.vertx') {
            details.useVersion vertxVersion
        }
    }
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'de.braintags' && details.requested.version == btVertxVersion) {
            details.useVersion btVertxVersion
        }
    }
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
    generated{
        java.srcDir "${projectDir}/src/generated/java"
    }
}

eclipse.classpath.plusConfigurations += [ configurations.provided ]

dependencies {
  compile group: 'io.vertx', name:'vertx-core', version:vertxVersion
  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
  compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'

  testCompile group: 'io.vertx', name:'vertx-core', version:vertxVersion, classifier:'tests'
  testCompile group: 'io.vertx', name:'vertx-unit', version:vertxVersion

  provided group: 'io.vertx', name:'vertx-codegen', version:vertxVersion
  provided group: 'io.vertx', name:'vertx-docgen', version:vertxVersion
  provided group: 'io.vertx', name:'vertx-codetrans', version:vertxVersion
  provided group: 'io.vertx', name:'vertx-rx-java', version:vertxVersion //optional
  provided group: 'io.vertx', name:'vertx-lang-groovy', version:vertxVersion
  provided group: 'io.vertx', name:'vertx-lang-js', version:vertxVersion
  provided group: 'io.vertx', name:'vertx-lang-ruby', version:vertxVersion //optional
}

apply from: file(rootDir.path + '/gradle/vertx/docs.gradle')

compileJava {
  source    += sourceSets.generated.java
    // specify javac arguments
    options.compilerArgs = [
            "-Acodetrans.output=${projectDir}/src/main"
    ]
}

test {
  exclude '**/BtVertxTestBase.class'
}

if (!multiProject) {
  sonarqube {
    properties {
      property 'sonar.projectKey', project.group + '.vertx:' + rootProject.artifactid
      property 'sonar.useWsCache', 'true'
    }
  }
}
