// properties
def skipTests           = project.hasProperty('skipTests')?project.skipTests:'false'
def skipTestJar         = project.hasProperty('skipTestJar')?project.skipTestJar:'false'
def ignoreFailedTests   = project.hasProperty('ignoreFailedTests')?project.ignoreFailedTests:false

apply plugin: 'jacoco'

test {
  useJUnit()

   systemProperty 'io.netty.leakDetectionLevel', 'PARANOID'

  if (hasProperty('mailClientUserName')){
   systemProperty 'mailClientUserName', mailClientUserName
   systemProperty 'mailClientPassword', mailClientPassword
  }

  test.ignoreFailures = ignoreFailedTests

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = '128m'
  maxHeapSize = '1200M'

  jvmArgs '-server'

  include '**/*TestAll*'
}
test.onlyIf {skipTests == 'false'}

sourceSets {
  if (!isEclipse) {
    commonTest {
      compileClasspath += main.output
      compileClasspath += main.compileClasspath
      runtimeClasspath += commonTest.output + commonTest.compileClasspath
    }
    test {
      compileClasspath += commonTest.output
      compileClasspath += commonTest.compileClasspath
      runtimeClasspath += test.output + test.compileClasspath
    }
  }
}

task commonTestsJar(type: Jar, group:"build") {
  classifier "commonTests"
  if (isEclipse) {
    from sourceSets.test.output
  } else {
    from sourceSets.commonTest.output
  }
}

configurations {
  commonTestCompile.extendsFrom compile
  commonTestRuntime.extendsFrom runtime

  testCompile.extendsFrom commonTestCompile
  testRuntime.extendsFrom commonTestRuntime

  commonTests.extendsFrom commonTestRuntime
}

artifacts.commonTests commonTestsJar

dependencies {
    commonTestCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile group: 'org.sonarsource.java', name: 'sonar-jacoco-listeners', version:'3.8'
}

task testjar(type: Jar, group: 'distribution', description: 'Create a jar containing all the tests'){
    classifier = 'tests'
    if (isEclipse) {
      from sourceSets.test.allSource
    } else {
      from sourceSets.commonTest.allSource
    }
}
testjar.onlyIf {skipTestJar=='false'}

eclipse {
  classpath.plusConfigurations += [configurations.commonTestCompile]
  classpath.plusConfigurations += [configurations.commonTestRuntime]
}